{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { getPostById } from '../state/post.selector';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@ngrx/store\";\nexport class EditpostsComponent {\n  constructor(router, formBuilder, store) {\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.store = store;\n  }\n  ngOnInit() {\n    this.router.paramMap.subscribe(data => {\n      console.log(data.get('id'));\n      const id = data.get('id');\n      this.store.select(getPostById, {\n        id\n      }).subscribe(res => {\n        console.log(res);\n        this.post = res;\n        console.log(this.post.description);\n      });\n    });\n    this.postForm = this.formBuilder.group({\n      title: [this.post.title, [Validators.required, Validators.minLength(6)]],\n      description: [this.post.description, [Validators.required, Validators.minLength(10)]]\n    });\n  }\n  onEditPost() {\n    console.log(this.postForm.value);\n  }\n  ngOnDestroy() {}\n}\nEditpostsComponent.ɵfac = function EditpostsComponent_Factory(t) {\n  return new (t || EditpostsComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.Store));\n};\nEditpostsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: EditpostsComponent,\n  selectors: [[\"app-editposts\"]],\n  decls: 14,\n  vars: 1,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [\"type\", \"text\", \"placeholder\", \"title\", \"formControlName\", \"title\", 1, \"form-control\"], [\"type\", \"text\", \"placeholder\", \"description\", \"formControlName\", \"description\", 1, \"form-control\"], [\"type\", \"submit\"]],\n  template: function EditpostsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"editposts works!\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function EditpostsComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onEditPost();\n      });\n      i0.ɵɵelementStart(3, \"div\")(4, \"label\");\n      i0.ɵɵtext(5, \"Title\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\")(8, \"label\");\n      i0.ɵɵtext(9, \"description\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"textarea\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"div\")(12, \"button\", 3);\n      i0.ɵɵtext(13, \"Edit Post\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.postForm);\n    }\n  },\n  dependencies: [i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["Validators","getPostById","EditpostsComponent","constructor","router","formBuilder","store","ngOnInit","paramMap","subscribe","data","console","log","get","id","select","res","post","description","postForm","group","title","required","minLength","onEditPost","value","ngOnDestroy","i0","ɵɵdirectiveInject","i1","ActivatedRoute","i2","FormBuilder","i3","Store","selectors","decls","vars","consts","template","EditpostsComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","EditpostsComponent_Template_form_ngSubmit_2_listener","ɵɵelement","ɵɵadvance","ɵɵproperty"],"sources":["C:\\AngularSampleNgrxProject\\Angular_ngrx\\src\\app\\posts\\editposts\\editposts.component.ts","C:\\AngularSampleNgrxProject\\Angular_ngrx\\src\\app\\posts\\editposts\\editposts.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { AppState } from 'src/app/app.state';\nimport { getPostById } from '../state/post.selector';\nimport { Posts } from 'src/app/models/post.model';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-editposts',\n  templateUrl: './editposts.component.html',\n  styleUrls: ['./editposts.component.css']\n})\nexport class EditpostsComponent implements OnInit {\n  public postForm!: FormGroup;\npublic id:any\n  post!: Posts;\n  postSubscription!: Subscription;\n  constructor(private router:ActivatedRoute,private formBuilder: FormBuilder,private store:Store<AppState>) { }\n\n  ngOnInit(): void {\n    this.router.paramMap.subscribe(data => {\n     console.log(data.get('id'));\n     const id=data.get('id')\n     this.store.select(getPostById,{id}).subscribe((res)=>{\n      console.log(res);\n    this.post=res\n    console.log(this.post.description);\n    \n      \n    })\n  })\n \n  this.postForm = this.formBuilder.group({\n\n    title:  [this.post.title,[Validators.required,Validators.minLength(6),]],\n    description: \n      [this.post.description,\n      [Validators.required,\n      Validators.minLength(10)],\n    ],\n  });\n  }\n  onEditPost(){\n    console.log(this.postForm.value );\n    \n    \n  }\n  ngOnDestroy(){\n\n  }\n}\n","<p>editposts works!</p>\n<form [formGroup]=\"postForm\" (ngSubmit)=\"onEditPost()\">\n    <div>\n    <label>Title</label>\n    <input type=\"text\" class=\"form-control\" placeholder=\"title\" formControlName=\"title\"/>\n</div>\n<div>\n    <label>description</label>\n    <textarea type=\"text\" class=\"form-control\" placeholder=\"description\" formControlName=\"description\"></textarea>\n    <!-- {{showDescriptionErrors()}} -->\n</div>\n<div>\n    <button type=\"submit\">Edit Post</button>\n</div>\n</form>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}